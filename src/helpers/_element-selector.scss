@charset "UTF-8";
@use "sass:string";
@use "sass:list";
@use "sass:meta";

/// Selector of element.
///
/// @access private
///
/// @param {String} $element - Name of element that will come after ".[block]__"
/// @param {Boolean} $nested [false] - If element is nested with another element
///
/// @returns {String} - .[block]__[element]
///
/// @see {mixin} element

@function element-selector($element, $nested: false) {
  $selector: '';
  $parent: string.unquote("#{&}");

  @if ($nested == true) {
    $selector: string.unquote("&#{$bem-element-separator}#{$element}");
  } @else {
    @if (is-block($parent)) {
      $selector: string.unquote("&#{$bem-element-separator}#{$element}");
    } @else {
      $block: get-block($parent);
      $selector: string.unquote("& .#{$block}#{$bem-element-separator}#{$element}");
    }

    @if (meta.type-of($element) == 'list') {
      $selector: ();

      @each $value in $element {
        $current: '';

        @if (is-block($parent)) {
          $current: string.unquote("&#{$bem-element-separator}#{$value}");
        } @else {
          $block: get-block($parent);
          $current: string.unquote("& .#{$block}#{$bem-element-separator}#{$value}");
        }

        $selector: list.append($selector, $current, comma);
      }
    }
  }

  @return $selector;
}

/// @alias element-selector

@function e-selector($element) {
  @return element-selector($element);
}

/// @alias element-selector

@function ee-selector($element) {
  @return element-selector($element, true);
}
