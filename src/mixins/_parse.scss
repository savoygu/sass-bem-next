@charset "UTF-8";
@use "sass:map";
@use "sass:string";
@use "sass:list";
@use "sass:meta";

/// Parse multiple mixins, pseudo elements and other states.
///
/// @param {String | List} $selectors - List or String of arguments, to generate selector.
///
/// @example scss - Usage
///     @include b('list') {
///         @include parse('&', 'm:inline', ':hover', '[disabled]') {
///             color: black;
///         }
///     }
///
/// @example css - Output
///     .list, .list--inline, .list:hover, .list[disabled] {
///         color: black;
///     }
///
/// @throws Mixin doesn't exist

@mixin parse($selectors...) {
  $parent: string.unquote("#{&}");
  $collection: ();

  @each $selector in $selectors {
    @if (map.get($bem-shortcodes, $selector)) {
      $selectors: splice($selectors, $selector);

      @each $mixin in map.get($bem-shortcodes, $selector) {
        $selectors: list.append($selectors, $mixin);
      }
    }
  }

  @each $selector in $selectors {
    $parts: explode($selector, ':');

    @if (string.length(list.nth($parts, 1)) == 0) {
      $selector: string.unquote("#{$parent}:#{list.nth($parts, 2)}");
    } @else if (list.length($parts) == 1) {
      $item: list.nth($parts, 1);

      @if (string.index(string.quote($item), string.quote('&'))) {
        $selector: string.unquote("#{str-replace(string.quote($item), string.quote('&'), string.quote($parent))}");
      } @else {
        @if mixin-exists(list.nth($parts, 1)) {
          $selector: meta.call(map.get-function(string.unquote("#{$item}-selector")));
        } @else {
          $selector: string.unquote("#{$parent}#{$item}");
        }
      }
    } @else {
      $item: implode($parts, ':');

      @if (string.index(string.quote($item), string.quote('&'))) {
        $selector: string.unquote("#{str-replace(string.quote($item), string.quote('&'), string.quote($parent))}");
      } @else {
        @if mixin-exists(list.nth($parts, 1)) {
          $function: meta.get-function(string.unquote("#{list.nth($parts, 1)}-selector"));
          $selector: meta.call($function, list.nth($parts, 2));
        } @else {
          @error "Mixin #{list.nth($parts, 1)} doesn't exists!";
        }
      }
    }

    $collection: list.append($collection, $selector);
  }

  @at-root {
    #{implode($collection, ', ')} {
      @content;
    }
  }
}

/// @alias parse

@mixin p($selectors...) {
  @include parse($selectors...) {
    @content;
  }
}
